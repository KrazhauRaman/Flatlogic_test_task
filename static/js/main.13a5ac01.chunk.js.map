{"version":3,"sources":["serviceWorker.js","RootReducer/actionConstants.js","Components/Header/Reducer/reducer.js","Components/ListOfTasks/Reducer/reducer.js","Components/NewTask/Reducer/reducer.js","RootReducer/rootReducer.js","Components/ListOfTasks/Task/Task.jsx","Components/ListOfTasks/ListOfActiveTasks.jsx","Components/ListOfTasks/Reducer/actions.js","Routing/routes.js","Components/Header/TaskListTypeSwitcer.jsx","Components/Header/Sorting.jsx","Components/Header/Header.jsx","Components/Header/Reducer/actions.js","Components/NewTask/NewTask.jsx","Components/NewTask/Reducer/actions.js","index.js"],"names":["Boolean","window","location","hostname","match","SWITCH_NEW_TASK_VISIBILITY","INCREACE_ID_COUNTER","CREATE_TASK","SWITCH_TASK_COMPLETED","DELETE_TASK","SWITCH_SORTING","initialState","sorting","sortByTime","directionUp","tasks","isVisible","currentIdCounter","combineReducers","Header","state","arguments","length","undefined","action","type","Actions","newSortByTime","newDirectionUp","_state$sorting","Object","objectSpread","ListOfTasks","newTasks","toConsumableArray","push","newTask","find","task","id","completed","elementPos","map","indexOf","splice","NewTask","newCounter","Task","_ref","name","date","priority","description","switchTaskCompleted","deleteTask","react_default","a","createElement","className","checked","onChange","htmlFor","dateTime","toLocaleDateString","toLocaleTimeString","defaultValue","disabled","onClick","ListOfActiveTasks","filteredTasksForDisplay","_this","this","_this$props","props","tasksForDisplay","listType","filter","sort","b","checkPriority","item","_this$props2","CSSTransitionGroup_default","transitionName","transitionEnterTimeout","transitionLeaveTimeout","generateTaskList","i","ListOfTasks_Task_Task","assign","key","Component","connect","store","dispatch","ActiveTasks","ListOfTasks_ListOfActiveTasks","TaskListTypeSwitcer","pageSwitchCallBack","HashRouter","role","aria-label","Link","to","document","hash","Sorting","setSortingByTime","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","forceUpdate","switchNewTaskVisibility","Header_TaskListTypeSwitcer","Header_Sorting","Date","nameInput","React","createRef","startTimer","current","focus","nextProps","_this2","setTimeout","setState","event","stopPropagation","currentTarget","value","dataset","_this3","_this$state","sendTaskToStore","increaceIdCounter","closeNewTaskWindow","_this4","_this$state2","concat","cancelPropagation","placeholder","changeName","ref","data-value","changePriority","changeDescription","createTask","createStore","rootReducer","ReactDOM","render","es","Fragment","Components_Header_Header","Switch","Redirect","exact","from","Route","path","component","Routes","Components_NewTask_NewTask","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13a5ac01.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// ################### new task reducer \r\n\r\nexport const SWITCH_NEW_TASK_VISIBILITY = 'SWITCH_NEW_TASK_VISIBILITY';\r\nexport const INCREACE_ID_COUNTER = 'INCREACE_ID_COUNTER';\r\n\r\n\r\n// ################### list of tasks reducer \r\n\r\nexport const CREATE_TASK = 'CREATE_TASK';\r\nexport const SWITCH_TASK_COMPLETED = 'SWITCH_TASK_COMPLETED';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\n\r\n\r\n// ################### header reducer \r\n\r\nexport const SWITCH_SORTING = 'SWITCH_SORTING';","import * as Actions from '../../../RootReducer/actionConstants';\r\n\r\nconst initialState = {\r\n    sorting: {\r\n        sortByTime: true,\r\n        directionUp: true,\r\n    },\r\n};\r\n\r\nexport default function handle(state = initialState, action) {\r\n    switch (action.type) {\r\n\r\n        case Actions.SWITCH_SORTING:\r\n            {\r\n                let newSortByTime, newDirectionUp,\r\n                    { sortByTime, directionUp } = state.sorting;\r\n\r\n                if (action.sortByTime === sortByTime) {\r\n                    newSortByTime = sortByTime;\r\n                    newDirectionUp = !directionUp;\r\n                }\r\n                else {\r\n                    newSortByTime = !sortByTime;\r\n                    newDirectionUp = directionUp;\r\n                };\r\n\r\n                return {\r\n                    ...state,\r\n                    sorting: {\r\n                        sortByTime: newSortByTime,\r\n                        directionUp: newDirectionUp,\r\n                    },\r\n                };\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as Actions from '../../../RootReducer/actionConstants';\r\n\r\n// ################### task fields\r\n//     id: id - number,\r\n//     name: name - string,\r\n//     date: date - Date(),\r\n//     priority: priority - \"High\" / \"Medium\" / \"Low\"\r\n//     description: description - string,\r\n//     completed: true/false,\r\n\r\nconst initialState = {\r\n    tasks: [],\r\n};\r\n\r\nexport default function handle(state = initialState, action) {\r\n    switch (action.type) {\r\n\r\n        case Actions.CREATE_TASK:\r\n            {\r\n                const newTasks = [...state.tasks];\r\n                newTasks.push(action.newTask);\r\n                return {\r\n                    ...state,\r\n                    tasks: newTasks,\r\n                };\r\n            }\r\n\r\n        case Actions.SWITCH_TASK_COMPLETED:\r\n            {\r\n                const newTasks = [...state.tasks];\r\n                newTasks.find(task => task.id === action.id).completed = !(newTasks.find(task => task.id === action.id).completed);\r\n                return {\r\n                    ...state,\r\n                    tasks: newTasks,\r\n                };\r\n            }\r\n\r\n        case Actions.DELETE_TASK:\r\n            {\r\n                const newTasks = [...state.tasks];\r\n                const elementPos = newTasks.map(task => task.id).indexOf(action.id);\r\n                newTasks.splice(elementPos, 1);\r\n                return {\r\n                    ...state,\r\n                    tasks: newTasks,\r\n                };\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as Actions from '../../../RootReducer/actionConstants';\r\n\r\nconst initialState = {\r\n    isVisible: true,\r\n    currentIdCounter: 0,\r\n};\r\n\r\nexport default function handle(state = initialState, action) {\r\n    switch (action.type) {    \r\n\r\n        case Actions.SWITCH_NEW_TASK_VISIBILITY:\r\n        {\r\n            return {\r\n                ...state,\r\n                isVisible: !state.isVisible,\r\n            };\r\n        }\r\n        \r\n        case Actions.INCREACE_ID_COUNTER:\r\n        {\r\n            let newCounter = state.currentIdCounter;\r\n            newCounter++;\r\n            return {\r\n                ...state,\r\n                currentIdCounter: newCounter,\r\n            };\r\n        }\r\n      \r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\n\r\nimport Header from '../Components/Header/Reducer/reducer';\r\nimport ListOfTasks from '../Components/ListOfTasks/Reducer/reducer';\r\nimport NewTask from '../Components/NewTask/Reducer/reducer';\r\n\r\nexport default combineReducers({\r\n    Header,\r\n    ListOfTasks,\r\n    NewTask\r\n});","import React from 'react';\r\nimport './task.css';\r\n\r\nconst Task = ({ id, name, date, priority, description, completed, switchTaskCompleted, deleteTask }) =>\r\n    <section className=\"card border-secondary mb-3 task-item\">\r\n        <div className=\"completed\">\r\n            <div className=\"custom-control custom-checkbox\">\r\n                <input type=\"checkbox\" className=\"custom-control-input\" id=\"isCompleted\" checked={completed}\r\n                    onChange={() => switchTaskCompleted(id)} />\r\n                <label className=\"custom-control-label\" htmlFor=\"isCompleted\">Completed</label>\r\n            </div>\r\n        </div>\r\n        <div className=\"task-info\">\r\n            <h3>Name: {name}</h3>\r\n            <div className=\"task-info-date-prio\">\r\n                <h4>Created: <time dateTime={date}>{date.toLocaleDateString() + \" \" + date.toLocaleTimeString()}</time></h4>\r\n                <h4>&nbsp;&nbsp;&nbsp;Priority: {priority}</h4>\r\n            </div>\r\n            <div className=\"task-description-wrapper\">\r\n                <textarea className=\"task-description\" defaultValue={description} disabled />\r\n            </div>\r\n        </div>\r\n        <div className=\"delete-task\">\r\n            <button className=\"btn btn-danger\" onClick={() => deleteTask(id)}><i className=\"fas fa-trash-alt\"></i></button>\r\n        </div>\r\n    </section>\r\n\r\nexport default Task;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Task from './Task/Task';\r\nimport './listOfTasks.css';\r\nimport { switchTaskCompleted, deleteTask } from './Reducer/actions';\r\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';\r\n\r\n\r\nclass ListOfActiveTasks extends Component {\r\n\r\n    //Применение к списку тасков фильтра по выполненности, а потом сортировка\r\n    generateTaskList() {\r\n        const { tasksForDisplay, listType, sorting } = this.props,\r\n            { sortByTime, directionUp } = sorting;\r\n        let filteredTasksForDisplay;\r\n\r\n        filteredTasksForDisplay = tasksForDisplay.filter(task => (task.completed === ((listType === \"active\") ? false : true)));\r\n\r\n        if (sortByTime) {\r\n            (directionUp)\r\n                ? filteredTasksForDisplay.sort((a, b) => { return a.id - b.id })\r\n                : filteredTasksForDisplay.sort((a, b) => { return b.id - a.id });\r\n        }\r\n        else {\r\n            (directionUp)\r\n                ? filteredTasksForDisplay.sort((a, b) => { return this.checkPriority(a.priority) - this.checkPriority(b.priority) })\r\n                : filteredTasksForDisplay.sort((a, b) => { return this.checkPriority(b.priority) - this.checkPriority(a.priority) })\r\n        };\r\n\r\n        return filteredTasksForDisplay;\r\n    }\r\n\r\n    //Перевод текста в численные условные значения, чтобы можно было отфильтровать\r\n    checkPriority(item) {\r\n        switch (item) {\r\n            case \"High\": {\r\n                return 2;\r\n            }\r\n\r\n            case \"Medium\": {\r\n                return 1;\r\n            }\r\n\r\n            default: {\r\n                return 0;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { switchTaskCompleted, deleteTask } = this.props;\r\n        return (\r\n            <main className=\"list-of-tasks\">\r\n                <CSSTransitionGroup /*Добавлена базовая анимация, чтобы таски не просто \"пропадали\" при удалении\\переключении */\r\n                    transitionName=\"moving-task-in-list\"\r\n                    transitionEnterTimeout={300}\r\n                    transitionLeaveTimeout={300}>\r\n                    {this.generateTaskList().map((task, i) => /*Из каждого таска в списке создаётся компонент, отображающий данные таска */\r\n                        <Task key={i} {...task}\r\n                            switchTaskCompleted={switchTaskCompleted}\r\n                            deleteTask={deleteTask}\r\n                        />\r\n                    )}\r\n                </CSSTransitionGroup>\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n/////////////// store //////////////\r\n\r\nconst getDataFromStore = store => ({\r\n    tasksForDisplay: store.ListOfTasks.tasks,\r\n    sorting: store.Header.sorting,\r\n});\r\n\r\nconst setDataToStore = dispatch => ({\r\n    switchTaskCompleted: (id) => dispatch(switchTaskCompleted(id)),\r\n    deleteTask: (id) => dispatch(deleteTask(id)),\r\n});\r\n\r\nexport default connect(getDataFromStore, setDataToStore)(ListOfActiveTasks);","import * as Actions from '../../../RootReducer/actionConstants';\r\n\r\nexport function switchTaskCompleted(id) {\r\n    return {\r\n        type: Actions.SWITCH_TASK_COMPLETED,\r\n        id: id,\r\n    };\r\n}\r\n\r\nexport function deleteTask(id) {\r\n    return {\r\n        type: Actions.DELETE_TASK,\r\n        id: id,\r\n    };\r\n}","import ListOfActiveTasks from '../Components/ListOfTasks/ListOfActiveTasks';\r\nimport React from 'react';\r\n\r\n// Обе страницы одинаковы по структуре, поэтому обошелся одним компонентом, но прикрученным к роутингу\r\nexport const ActiveTasks = () => <ListOfActiveTasks listType=\"active\" />;\r\nexport const CompletedTasks = () => <ListOfActiveTasks listType=\"completed\" />;","import React from 'react';\r\nimport { HashRouter, Link } from 'react-router-dom';\r\n\r\nconst TaskListTypeSwitcer = ({ pageSwitchCallBack }) =>\r\n  <nav>\r\n    <HashRouter>\r\n      <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n        <Link to=\"/active-tasks\">\r\n          <button type=\"button\" className=\"btn btn-warning\" onClick={pageSwitchCallBack} disabled={\"#/active-tasks\" === document.location.hash}>Active</button>\r\n        </Link>\r\n        <Link to=\"/completed-tasks\">\r\n          <button type=\"button\" className=\"btn btn-warning\" onClick={pageSwitchCallBack} disabled={\"#/completed-tasks\" === document.location.hash}>Completed</button>\r\n        </Link>\r\n      </div>\r\n    </HashRouter>\r\n  </nav>\r\n\r\nexport default TaskListTypeSwitcer;\r\n","import React from 'react';\r\n\r\nconst Sorting = ({ setSortingByTime, sortByTime, directionUp }) =>\r\n    <div className=\"sorting-elements\">\r\n        <h2>Sort by:&nbsp;</h2>        \r\n        <h2 className={(sortByTime) ? \"sorting-switcher active-switcher\" : \"sorting-switcher\"} onClick={() => setSortingByTime(true)}>\r\n            time{(sortByTime) ? (directionUp) ? <i className=\"fas fa-angle-up\" /> : <i className=\"fas fa-angle-down\" /> : \"\"}\r\n        </h2>\r\n        <h2>&nbsp;or&nbsp;</h2>\r\n        <h2 className={(!sortByTime) ? \"sorting-switcher active-switcher\" : \"sorting-switcher\"} onClick={() => setSortingByTime(false)}>\r\n            priority{(!sortByTime) ? (directionUp) ? <i className=\"fas fa-angle-up\" /> : <i className=\"fas fa-angle-down\" /> : \"\"}\r\n        </h2>\r\n    </div>\r\n\r\nexport default Sorting;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport TaskListTypeSwitcer from './TaskListTypeSwitcer';\r\nimport Sorting from './Sorting';\r\nimport './header.css';\r\nimport { switchNewTaskVisibility, setSortingByTime } from './Reducer/actions';\r\n\r\n\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.pageSwitchCallBack = this.pageSwitchCallBack.bind(this);\r\n    }\r\n\r\n    //Коллбэк для обновления компоненты при смене адреса\r\n    pageSwitchCallBack() {\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render() {\r\n        const { switchNewTaskVisibility, setSortingByTime, sorting } = this.props,\r\n            { sortByTime, directionUp } = sorting;\r\n        return (\r\n            <header className=\"navbar navbar-expand-lg navbar-light bg-light header\">\r\n            <div className=\"header-wrapper\">\r\n                <button className=\"btn btn-success\" onClick={switchNewTaskVisibility}>Add new task</button>\r\n                <TaskListTypeSwitcer pageSwitchCallBack={this.pageSwitchCallBack} />\r\n                <Sorting sortByTime={sortByTime} directionUp={directionUp} setSortingByTime={setSortingByTime} />\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n/////////////// store //////////////\r\n\r\nconst getDataFromStore = store => ({\r\n    sorting: store.Header.sorting,\r\n});\r\n\r\nconst setDataToStore = dispatch => ({\r\n    switchNewTaskVisibility: () => dispatch(switchNewTaskVisibility()),\r\n    setSortingByTime: sortByTime => dispatch(setSortingByTime(sortByTime)),\r\n});\r\n\r\nexport default connect(getDataFromStore, setDataToStore)(Header);","import * as Actions from '../../../RootReducer/actionConstants';\r\n\r\nexport function switchNewTaskVisibility() {\r\n    return {\r\n        type: Actions.SWITCH_NEW_TASK_VISIBILITY,\r\n    };\r\n}\r\n\r\nexport function setSortingByTime(sortByTime) {\r\n    return {\r\n        type: Actions.SWITCH_SORTING,\r\n        sortByTime: sortByTime,\r\n    };\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './newTask.css';\r\n\r\nimport { switchNewTaskVisibility, createTask, increaceIdCounter } from './Reducer/actions';\r\n\r\nclass NewTask extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: \"\",\r\n            date: new Date(),\r\n            priority: \"\",\r\n            description: \"\",\r\n        };\r\n\r\n        this.nameInput = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startTimer();\r\n        this.nameInput.current.focus();\r\n    }\r\n\r\n    //Если пользователь закрыл окно, то при следующем открытии после апдейта компонента фокус выставится на вводе имени\r\n    componentDidUpdate(nextProps) {\r\n        if (!nextProps.isVisible) {\r\n            if (this.props.isVisible) {\r\n                setTimeout(() => this.nameInput.current.focus(), 100);\r\n            }\r\n        };\r\n    }\r\n\r\n    //Таймер для часов на форме создания таска\r\n    startTimer() {\r\n        this.props.isVisible && this.setState({\r\n            date: new Date(),\r\n        });\r\n        setTimeout(this.startTimer.bind(this), 1000);\r\n    }\r\n\r\n    //Отмена закрытия формы создания таска при клике не на окружающую область\r\n    cancelPropagation(event) {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    //Набор обработчиков изменений полей формы созданяи таска\r\n    changeName(event) {\r\n        this.setState({\r\n            name: event.currentTarget.value,\r\n        });\r\n    }\r\n\r\n    changeDescription(event) {\r\n        this.setState({\r\n            description: event.currentTarget.value,\r\n        });\r\n    }\r\n\r\n    changePriority(event) {\r\n        this.setState({\r\n            priority: event.currentTarget.dataset.value,\r\n        });\r\n    }\r\n\r\n    //При закрытии данные сбрасыватся через пол секунды, чтобы форма успела заехать за край экрана\r\n    closeNewTaskWindow() {\r\n        this.props.switchNewTaskVisibility();\r\n        setTimeout(() => {\r\n            this.setState({\r\n                name: \"\",\r\n                priority: \"\",\r\n                description: \"\",\r\n            })\r\n        }, 500);\r\n    }\r\n\r\n    //Создание нового таска, отправка его в стор, закрытие формы\r\n    createTask() {\r\n        const { name, date, priority, description } = this.state,\r\n            { id, sendTaskToStore, increaceIdCounter } = this.props;\r\n\r\n        if (name && priority && description) {\r\n            const newTask = {\r\n                id: id,\r\n                name: name,\r\n                date: date,\r\n                priority: priority,\r\n                description: description,\r\n                completed: false,\r\n            };\r\n\r\n            sendTaskToStore(newTask);\r\n            increaceIdCounter();\r\n            this.closeNewTaskWindow();\r\n        };\r\n    }\r\n\r\n\r\n    render() {\r\n        const { isVisible } = this.props,\r\n            { name, date, priority, description } = this.state;\r\n        return (\r\n            <div className={`${(isVisible) ? \"new-task-overlay active\" : \"new-task-overlay\"}`} onClick={this.closeNewTaskWindow.bind(this)}>\r\n                <section className={`${(isVisible) ? \"modal-dialog new-task-window appear\" : \"modal-dialog new-task-window\"}`} onClick={this.cancelPropagation}>\r\n                    <div className=\"modal-content new-task-window-content\">\r\n                        <div className={\"modal-header\"}>\r\n                            <input className={`${(name) ? \"form-control name-input done\" : \"form-control name-input error\"}`} type=\"text\"\r\n                                placeholder=\"Add task name\" value={name} onChange={(event) => this.changeName(event)} ref={this.nameInput} />\r\n                            <div className=\"dropdown\">\r\n                                <button className={`${(priority) ? \"btn dropdown-btn btn-outline-success done\" : \"btn btn-secondary dropdown-btn error\"}`}>\r\n                                    {(priority) ? priority : \"Set priority\"}\r\n                                </button>\r\n                                <div className=\"dropdown-content\">\r\n                                    <div data-value=\"High\" onClick={(event) => this.changePriority(event)}>High</div>\r\n                                    <div data-value=\"Medium\" onClick={(event) => this.changePriority(event)}>Medium</div>\r\n                                    <div data-value=\"Low\" onClick={(event) => this.changePriority(event)}>Low</div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"new-task-time\">\r\n                                <h5>Time of creation</h5>\r\n                                <time dateTime={date}>{date.toLocaleDateString() + \" \" + date.toLocaleTimeString()}</time>\r\n                            </div>\r\n                            <button className=\"btn btn-danger\" onClick={this.closeNewTaskWindow.bind(this)}>Cancel</button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            <textarea className={`${(description) ? \"form-control new-task-desc done\" : \"form-control new-task-desc error\"}`}\r\n                                placeholder=\"Add task description\" value={description} onChange={(event) => this.changeDescription(event)}>\r\n                            </textarea>\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button className={!(name && priority && description) ? \"btn btn-warning\" : \"btn btn-success\"}\r\n                                disabled={!(name && priority && description)}\r\n                                onClick={this.createTask.bind(this)}>\r\n                                Create\r\n                        </button>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n/////////////// store //////////////\r\n\r\nconst getDataFromStore = store => ({\r\n    isVisible: store.NewTask.isVisible,\r\n    id: store.NewTask.currentIdCounter,\r\n});\r\n\r\nconst setDataToStore = dispatch => ({\r\n    switchNewTaskVisibility: () => dispatch(switchNewTaskVisibility()),\r\n    sendTaskToStore: (newTask) => dispatch(createTask(newTask)),\r\n    increaceIdCounter: () => dispatch(increaceIdCounter()),\r\n});\r\n\r\nexport default connect(getDataFromStore, setDataToStore)(NewTask);","import * as Actions from '../../../RootReducer/actionConstants';\r\n\r\nexport function switchNewTaskVisibility() {\r\n    return {\r\n        type: Actions.SWITCH_NEW_TASK_VISIBILITY,\r\n    };\r\n}\r\n\r\nexport function createTask(newTask) {\r\n    return {\r\n        type: Actions.CREATE_TASK,\r\n        newTask: newTask,\r\n    };\r\n}\r\n\r\nexport function increaceIdCounter() {\r\n    return {\r\n        type: Actions.INCREACE_ID_COUNTER,\r\n    };\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './RootReducer/rootReducer';\n\nimport * as Routes from './Routing/routes';\n\nimport { HashRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport Header from './Components/Header/Header';\nimport NewTask from './Components/NewTask/NewTask';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.Fragment>\n            <Header />\n            <HashRouter>\n                <Switch>\n                    <Redirect exact from=\"/\" to=\"/active-tasks\" />\n                    <Route exact path=\"/active-tasks\" component={Routes.ActiveTasks} />\n                    <Route exact path=\"/completed-tasks\" component={Routes.CompletedTasks} />\n                    <Route component={Routes.ActiveTasks} />  {/* Сюда можно добавить 404 страницу или ещё что, пока просто загулшка */}\n                </Switch>\n            </HashRouter>\n            <NewTask />\n        </React.Fragment>\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}